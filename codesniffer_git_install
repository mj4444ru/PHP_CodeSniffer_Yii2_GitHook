#!/usr/bin/env php
<?php

require 'utils.php';

$sourceDir = PHP_CodeSniffer_Yii2_GitHook\Utils::getSelfDir();
$vendorDir = PHP_CodeSniffer_Yii2_GitHook\Utils::getVendorDir();
$gitProjectDir = PHP_CodeSniffer_Yii2_GitHook\Utils::getGitProjectDir();
if (!$gitProjectDir) {
    echo "Unable to install hook: Git folder not found!\n\n";
    exit(1);
}
$shortVendorDir = substr($vendorDir, strlen($gitProjectDir));
$shortSourceDir = substr($sourceDir, strlen($gitProjectDir) + 1);
$ds = DIRECTORY_SEPARATOR;
$hooksDir = "{$gitProjectDir}{$ds}.git{$ds}hooks";
$infoDir = "{$gitProjectDir}{$ds}.git{$ds}info";

PHP_CodeSniffer_Yii2_GitHook\Utils::readProjectConfig();

echo "Install hook in \"{$hooksDir}\"\n";

$hookFileName = "{$hooksDir}{$ds}pre-commit";
$hookSourceFileName = "{$sourceDir}{$ds}hooks{$ds}pre-commit";

if (file_exists($hookFileName)) {
    echo "Remove file \"{$hookFileName}\"\n";
    if (!is_writable($hookFileName)) {
        echo "Unable to install hook: \"{$hookFileName}\" is readonly!\n\n";
        exit(2);
    }
    if (!is_file($hookFileName) && is_link($hookFileName)) {
        echo "Unable to install hook: \"{$hookFileName}\" is not file!\n\n";
        exit(2);
    }
    if (!@unlink($hookFileName)) {
        echo "Unable to install hook: Cannot delete file \"{$hookFileName}\"!\n\n";
        exit(2);
    }
}
echo "Copy hook from \"{$hookSourceFileName}\" to \"{$hookFileName}\"\n";
if (!@copy($hookSourceFileName, $hookFileName)) {
    echo "Unable to install hook: Cannot copy hook file!\n\n";
    exit(2);
}
@chmod($hookFileName, 0775);

$shortVendorDirS = addslashes($shortVendorDir);
$shortSourceDirS = addslashes($shortSourceDir);
if ($shortVendorDirS != '/vendor') {
    PHP_CodeSniffer_Yii2_GitHook\Utils::fileStrReplace($hookFileName, '$PROJECT/vendor', "\$PROJECT{$shortVendorDirS}");
}

$extensions = PHP_CodeSniffer_Yii2_GitHook\Utils::getExtensions();
$extensionsS = addslashes($extensions);
echo "Install git filter \"phpcbf\" for \"{$extensionsS}\" files\n";

passthru("git config filter.phpcbf.required true");
passthru("git config filter.phpcbf.clean \"{$shortSourceDirS}{$ds}codesniffer_git_filter_clean %f\"");
$extensions = explode(',', $extensions);
$extensionsAttrList = array();
foreach ($extensions as $ext) {
    $extensionsAttrList["*.{$ext} filter=phpcbf"] = true;
}
$attributesFile = @file("{$infoDir}/attributes");
if (is_array($attributesFile)) {
    foreach ($attributesFile as $i => $attributesFileLine) {
        $line = rtrim($attributesFileLine);
        if ($attributesFileLine == $line) {
            $attributesFile[$i] = "{$attributesFileLine}\n";
        }
        if (substr($line, -14) == ' filter=phpcbf') {
            if (array_key_exists($line, $extensionsAttrList)) {
                unset($extensionsAttrList[$line]);
            } else {
                unset($attributesFile[$i]);
            }
        }
    }
} else {
    $attributesFile = array();
}
foreach ($extensionsAttrList as $line => $v) {
    $attributesFile[] = "{$line}\n";
}
@file_put_contents("{$infoDir}/attributes", implode('', $attributesFile));

exit(0);
