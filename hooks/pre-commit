#!/bin/sh

STANDARD="Yii2"
ENCODING="utf-8"
IGNORE_WARNINGS=Y
PROGRESS=
COLORS=Y
TMP_STAGING=".tmp_staging"

# PROJECT=`php -r "echo dirname(dirname(dirname(realpath('$0'))));"`
PROJECT=`readlink -e "$0"`
PROJECT=`dirname "$PROJECT"`
PROJECT=`dirname "$PROJECT"`
PROJECT=`dirname "$PROJECT"`
VENDOR="$PROJECT/vendor";

if [ -f "$PROJECT/.phpcsgit" ]
then
  . $PROJECT/.phpcsgit
fi

if [ "$IGNORE_WARNINGS" != "" ]
then
  IGNORE_WARNINGS="-n"
else
  IGNORE_WARNINGS=""
fi

if [ "$PROGRESS" != "" ]
then
  PROGRESS="-p"
else
  PROGRESS=""
fi

if [ "$COLORS" != "" ]
then
  COLORS="--runtime-set colors 1"
else
  COLORS="--runtime-set colors 0"
fi

if [ "$STANDARD" = "Yii2" ]
then
  STANDARD="$VENDOR/yiisoft/yii2-coding-standards/Yii2"
fi
if [ "$STANDARD" = "Yii2Ext" ]
then
  STANDARD="$VENDOR/mj4444/php_codesniffer_yii2_githook/Yii2Ext"
fi

if [ -e $TMP_STAGING ]
then
  rm -rf $TMP_STAGING
fi
mkdir $TMP_STAGING

# JS files

STAGED_FILES_CMD=`git diff-index --cached --name-only --diff-filter=ACMR HEAD | grep \\\\.js$`

FILES=
for FILE in $STAGED_FILES_CMD
do
  ID=$(git diff-index --cached HEAD $FILE | cut -d " " -f4)
  mkdir -p "$TMP_STAGING/$(dirname $FILE)"
  git cat-file blob $ID > "$TMP_STAGING/$FILE"
  FILES="$FILES $TMP_STAGING/$FILE"
done

if [ "$FILES" != "" ]
then
  echo "Running Code Sniffer for JS..."
  $VENDOR/bin/phpcs --standard=$STANDARD --encoding=$ENCODING $COLORS $IGNORE_WARNINGS $PROGRESS $FILES
  if [ $? != 0 ]
  then
    echo "Fix the error before commit."
    rm -rf $TMP_STAGING
    exit 1
  fi
fi

# PHP files

STAGED_FILES_CMD=`git diff-index --cached --name-only --diff-filter=ACMR HEAD | grep -E "\\\\.(php|phtml)$"`

echo "Checking PHP Lint..."
FILES=
for FILE in $STAGED_FILES_CMD
do
  ID=$(git diff-index --cached HEAD $FILE | cut -d " " -f4)
  mkdir -p "$TMP_STAGING/$(dirname $FILE)"
  git cat-file blob $ID > "$TMP_STAGING/$FILE"
  php -l -d display_errors=0 $TMP_STAGING/$FILE
  if [ $? != 0 ]
  then
    echo "Fix the error before commit."
    rm -rf $TMP_STAGING
    exit 1
  fi
  FILES="$FILES $TMP_STAGING/$FILE"
done

if [ "$FILES" != "" ]
then
  echo "Running Code Sniffer for PHP..."
  $VENDOR/bin/phpcs --standard=$STANDARD --encoding=$ENCODING $COLORS $IGNORE_WARNINGS $PROGRESS $FILES
  if [ $? != 0 ]
  then
    echo "Fix the error before commit."
    rm -rf $TMP_STAGING
    exit 1
  fi
fi

rm -rf $TMP_STAGING
exit $?
