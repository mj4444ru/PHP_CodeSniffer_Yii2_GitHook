#!/usr/bin/env php
<?php

$root = dirname(__DIR__);
require  "{$root}/utils.php";

$utils = new PHP_CodeSniffer_Yii2_GitHook\Utils();
$vendorDir = $utils->getVendorDir();
$projectDir = $utils->getProjectDir();
$ds = DIRECTORY_SEPARATOR;

$fileList = array();
exec('git diff-index --cached --diff-filter=ACMR HEAD', $fileList, $exitcode);
if ($exitcode) {
    echo "\nError receiving data in git pre-commit hook.\n\n";
    exit(1);
}

$checkFileList = array();
$checkPhpFileList = array();

foreach ($fileList as $fileInfo) {
    list($fileInfo, $fileName)  = explode("\t", $fileInfo, 2);
    $fileInfo = explode(' ', $fileInfo);
    if ($utils->isCheckFile($fileName)) {
        $checkFileList[$fileName] = $fileInfo;
        if ($utils->isCheckFile($fileName, 'php')) {
            $checkPhpFileList[$fileName] = &$checkFileList[$fileName];
        }
    }
}

foreach ($checkFileList as $fileName => &$fileInfo) {
    $execResult = $utils->exec("git cat-file blob {$fileInfo[3]}", '');
    if ($execResult['exitcode'] != 0) {
        echo "\nError receiving data in git pre-commit hook.\n\n";
        exit(2);
    }
    $fileInfo['content'] = $execResult['stdout'];
}
unset($fileInfo);

$hasError = false;
foreach ($checkPhpFileList as $chkFileName => $fileInfo) {
    $execResult = $utils->exec('php -l', $fileInfo['content']);
    if ($execResult['exitcode'] != 0) {
        echo str_replace(' in - on ', " in {$chkFileName} on ", $execResult['stderr']);
        $hasError = true;
    }
}
if ($hasError) {
    echo "\nFix the error before commit.\n\n";
    exit(3);
}

$hasError = false;
foreach ($checkFileList as $chkFileName => $fileInfo) {
    if ($utils->isIgnoreFile("{$projectDir}/{$chkFileName}")) {
        continue;
    }
    $utils->setConfigParam('STDIN_PATH', $chkFileName);
    $stdArgv = 'standard encoding colors ignore_warnings extensions stdin_path';
    $stdArgvText = $utils->createParamStr($stdArgv, true);
    $execCmd = "{$vendorDir}{$ds}squizlabs{$ds}php_codesniffer{$ds}scripts{$ds}phpcs {$stdArgvText}";
    $execResult = $utils->exec($execCmd, $fileInfo['content']);
    if ($execResult['exitcode'] != 0) {
        $hasError = true;
        echo $execResult['stdout'];
    }
    if ($utils->isJshintFile($chkFileName)) {
        $stdArgv = 'filename';
        $stdArgvText = $utils->createParamStr($stdArgv, true);
        $execCmd = "jshint {$stdArgvText} -";
        $execResult = $utils->exec($execCmd, $fileInfo['content']);
        if ($execResult['exitcode'] != 0) {
            $hasError = true;
            echo $execResult['stdout'];
        }
    }
}
if ($hasError) {
    echo "\nFix the error before commit.\n\n";
    echo "Use \"// @codingStandardsIgnoreFile\" to skip check.\n\n";
    exit(4);
}

exit(0);
