#!/usr/bin/env php
<?php

ob_start(function($buffer, $phase) {
    fwrite(STDERR, $buffer);
    return $GLOBALS['output'];
});

$root = dirname(__DIR__);
require  "{$root}/utils.php";

$utils = new PHP_CodeSniffer_Yii2_GitHook\Utils();
$vendorDir = $utils->getVendorDir();
$projectDir = $utils->getProjectDir();
$input = file_get_contents('php://stdin');
$output = $input;
$chkFileName = $_SERVER['argv'][1];
$ds = DIRECTORY_SEPARATOR;

if ($utils->isCheckFile($chkFileName, 'php')) {
    $execResult = $utils->exec('php -l', $output);
    if ($execResult['exitcode'] != 0) {
        echo str_replace(' in - on ', " in {$chkFileName} on ", $execResult['stderr']);
        if ($utils->getConfigParam('FILTER_NO_ABORT')) {
            exit(0);
        }
        exit(1);
    }
}

if ($utils->isIgnoreFile("{$projectDir}/{$chkFileName}")) {
    exit(0);
}

$utils->setConfigParam('STDIN_PATH', $chkFileName);
$stdArgv = 'standard encoding colors ignore_warnings extensions stdin_path';
$stdArgvText = $utils->createParamStr($stdArgv, true);

$execCmd = "{$vendorDir}{$ds}squizlabs{$ds}php_codesniffer{$ds}scripts{$ds}phpcbf {$stdArgvText}";
$execResult = $utils->exec($execCmd, $output);
if ($execResult['exitcode'] == 1) {
    $output = $execResult['stdout'];
}

$execCmd = "{$vendorDir}{$ds}squizlabs{$ds}php_codesniffer{$ds}scripts{$ds}phpcs {$stdArgvText}";
$execResult = $utils->exec($execCmd, $output);
if ($execResult['exitcode'] != 0) {
    echo $execResult['stdout'];
    echo "Use \"// @codingStandardsIgnoreFile\" to skip check.\n\n";
    $output = $input;
    if ($utils->getConfigParam('FILTER_NO_ABORT')) {
        exit(0);
    }
    exit(2);
}

if ($utils->isCheckFile($chkFileName, 'jshint')) {
    $stdArgv = 'filename jshintrc';
    $stdArgvText = $utils->createParamStr($stdArgv, true);
    $execCmd = "jshint {$stdArgvText} -";
    $execResult = $utils->exec($execCmd, $input);
    if ($execResult['exitcode'] != 0) {
        echo $execResult['stdout'];
        echo $execResult['stderr'];
        if ($execResult['exitcode'] == 127) {
            echo "\n  install with: sudo npm install -g jshint";
        }
        echo "\n\n";
        $output = $input;
        if ($utils->getConfigParam('FILTER_NO_ABORT')) {
            exit(0);
        }
        exit(3);
    } elseif ($output != $input) {
        $execResult = $utils->exec($execCmd, $output);
        if ($execResult['exitcode'] != 0) {
            echo $execResult['stdout'];
            echo $execResult['stderr'];
            echo "\nCheck fails after fixing errors in phpcbf. Errors positions are incorrect!";
            echo "\n\n";
            $output = $input;
            if ($utils->getConfigParam('FILTER_NO_ABORT')) {
                exit(0);
            }
            exit(3);
        }
    }
}

if ($output != $input) {
    echo "When added found errors have been fixed in \"{$chkFileName}\"\n";
}

exit(0);
